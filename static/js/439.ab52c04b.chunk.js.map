{"version":3,"file":"static/js/439.ab52c04b.chunk.js","mappings":"yNAGaA,EAAmBC,EAAAA,GAAAA,GAAH,6SAchBC,GAAmBD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,ugBAIP,SAAAG,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,YAkBrCC,EAAkBP,EAAAA,GAAAA,IAAH,yEAKfQ,EAAkBR,EAAAA,GAAAA,EAAH,kLAEjB,SAAAG,GAAK,OAAIA,EAAMC,MAAMC,OAAOI,Q,kBCzCxB,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,MAC5BC,GAAWC,EAAAA,EAAAA,MACf,OACA,SAACd,EAAD,UACGY,GAASA,EAAMG,KAAI,kBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,eAAgBC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,cAAeC,EAAlD,EAAkDA,aAAlD,OAClB,UAACnB,EAAD,CAAkBoB,MAAO,CAACC,KAAMV,GAC9BW,GAAE,kBAAaR,GADjB,UAGKI,GACH,SAACZ,EAAD,CACEiB,IAAG,yCAAoCL,GACvCM,IAAI,gBAGN,SAAClB,EAAD,CAAiBiB,IAAKE,EAAQD,IAAI,aAElC,wCAAIT,QAAJ,IAAIA,EAAAA,EAASC,SAAb,QAA+BC,KAC/B,SAACV,EAAD,UAAkB,IAAImB,KAAKP,GAAcQ,yBAVpCb,U,4KCUFc,GAlBmB7B,EAAAA,GAAAA,GAAH,gKASGA,EAAAA,EAAAA,IAAO8B,EAAAA,GAAP9B,CAAH,6JASFA,EAAAA,GAAAA,GAAH,4E,mBCET,SAAS+B,IACtB,MAnB4B,WAC1B,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOrB,EAAP,KAAcsB,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAcF,OAZEC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACED,GAAW,GADb,kBAGwBE,EAAAA,KAA2BC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAHrE,OAGU7B,EAHV,OAIIsB,EAAStB,GAJb,yEAOWwB,GAAW,GAPtB,6EADc,uBAAC,WAAD,wBAUdM,KACC,IACE,CAAC9B,MAAAA,EAAOuB,QAAAA,GAGUQ,GAAlB/B,EAAP,EAAOA,MAAOuB,EAAd,EAAcA,QAEd,OACE,4BACE,SAACL,EAAD,6BACCK,IAAW,SAACS,EAAA,EAAD,IACXhC,IAAS,SAACD,EAAA,EAAD,CAAYC,MAAOA,S,6KC3B5B,SAASiC,IAGd,OAFoBC,IAAAA,IAAA,2FACnBP,MAAK,SAAAQ,GAAQ,OAAIA,EAASP,QAItB,SAASQ,EAAiBhC,GAG/B,OAFsB8B,IAAAA,IAAA,6CAAgD9B,EAAhD,wEACrBuB,MAAK,SAAAQ,GAAQ,OAAIA,EAASP,QAItB,SAASS,EAAoBjC,GAGlC,OAF2B8B,IAAAA,IAAA,6CAAgD9B,EAAhD,qEAC1BuB,MAAK,SAAAQ,GAAQ,OAAIA,EAASP,QAItB,SAASU,EAAoBlC,GAGlC,OAF2B8B,IAAAA,IAAA,6CAAgD9B,EAAhD,4EAC1BuB,MAAK,SAAAQ,GAAQ,OAAIA,EAASP,QAItB,SAASW,EAAkBC,GAGhC,OAF0BN,IAAAA,IAAA,6IAAgJM,IACzKb,MAAK,SAAAQ,GAAQ,OAAIA,EAASP,U","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.js","services/fetch-movies-api.js"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const ListMoviesStyled = styled.ol`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nflex-wrap: wrap;\npadding-top: 20px;\n  max-width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  gap: 24px;\n  /* grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); */\ncounter-reset: section;\n`;\n\nexport const ItemMoviesStyled = styled(NavLink)`\nwidth: 240px;\n  display: block;\n  padding: 5px;\n  background-color: ${props => props.theme.colors.buttonBg};\n  transform: scale(1);\n  transition: transform 250ms linear;\n  border-radius: 15px 15px 0 0;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    cursor: pointer;\n  }\ncounter-increment: section;\n::before{\ncontent: counters(section,\".\") \". \";\ncolor: red;\nfont-weight: bold;\n}`;\n\nexport const ImageFilmStyled = styled.img`\n  border-radius: 15px 15px 0 0;\n  width: 100%;\n`;\n\nexport const MovieTextStyled = styled.p`\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.grey};\n  font-size: 14px;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","import { useLocation } from \"react-router-dom\";\nimport {ListMoviesStyled, ItemMoviesStyled, ImageFilmStyled, MovieTextStyled} from \"./MoviesList.styled\";\nimport PropTypes from 'prop-types';\nimport noFilm from '../../images/noFilm.jpg';\n\nexport default function MoviesList({items}) {\n  const location = useLocation();\n    return(\n    <ListMoviesStyled >\n      {items && items.map(({id, title, original_title, name, backdrop_path, release_date }) =>\n        <ItemMoviesStyled state={{from: location}}\n          to={`/movies/${id}`}\n          key={id}>\n            {backdrop_path ? (\n          <ImageFilmStyled\n            src={`https://image.tmdb.org/t/p/w300${backdrop_path}`}\n            alt=\"Image Film\"\n          />\n        ) : (\n          <ImageFilmStyled src={noFilm} alt=\"no Film\" />\n        )}\n          <p>{title ?? original_title ?? name}</p>\n          <MovieTextStyled>{new Date(release_date).toLocaleDateString()}</MovieTextStyled>\n        </ItemMoviesStyled>)}\n    </ListMoviesStyled>\n    )}\n\n    MoviesList.propTypes = {\n      items: PropTypes.array.isRequired\n    };\n\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n\nexport const ListMoviesStyled = styled.ol`\ndisplay: flex;\nalign-items: flex-start;\nflex-direction: column;\nlist-style: none;\ncounter-reset: section;\nlist-style-type: none;\n`;\n\nexport const ItemMoviesStyled = styled(Link)`\nlist-style: none;\ncounter-increment: section;\n::before{\ncontent: counters(section,\".\") \". \";\ncolor: red;\nfont-weight: bold;\n}\n`\nexport const TitleStyled = styled.h1`\ncolor: rgb(222, 160, 30);\ntext-align: center;\n}\n`\n\n","import { useEffect, useState } from \"react\"\nimport * as MoviesAPI from \"../../services/fetch-movies-api\";\nimport MoviesList from \"../../components/MoviesList\";\nimport {TitleStyled} from \"./HomePage.styled\";\nimport Loader from \"../../components/Loader\";\n\n  const useFetchTrendMovies = () => {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);  \n    \n    useEffect(() => {\n      async function fetchTrendMovies () {\n        setLoading(true);\n        try {\n          const items = await MoviesAPI.fetchMoviesAPI().then(data => data.results)\n          setItems(items)\n        }\n        catch (error) {}\n        finally {setLoading(false)}\n      }\n      fetchTrendMovies()\n    }, [])\n  return {items, loading}  }\n\nexport default function HomePage() {  \n  const {items, loading} = useFetchTrendMovies()\n\n  return(\n    <div>\n      <TitleStyled>Trending today</TitleStyled>\n      {loading && <Loader/>}\n      {items && <MoviesList items={items}></MoviesList>}  \n    </div>\n  )\n}","import axios from \"axios\";\n\n// API Key: e00a8fe96730262954d4fe74242d0bb1\n\nexport function fetchMoviesAPI () {\n  const fetchMovies = axios.get(`https://api.themoviedb.org/3/trending/all/week?api_key=e00a8fe96730262954d4fe74242d0bb1`)\n  .then(response => response.data)\n  return fetchMovies\n}\n\nexport function fetchMoviesById (id) {\n  const fetchMoviesId = axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=e00a8fe96730262954d4fe74242d0bb1&append_to_response=images`)\n  .then(response => response.data)\n  return fetchMoviesId\n}\n\nexport function fetchMoviesCredits (id) {\n  const fetchMoviesCredits = axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=e00a8fe96730262954d4fe74242d0bb1&language=en-US`)\n  .then(response => response.data)\n  return fetchMoviesCredits\n}\n\nexport function fetchMoviesReviews (id) {\n  const fetchMoviesReviews = axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=e00a8fe96730262954d4fe74242d0bb1&language=en-US&page=1`)\n  .then(response => response.data)\n  return fetchMoviesReviews\n}\n\nexport function fetchMoviesQuery (query) {\n  const fetchMoviesQueris = axios.get(`https://api.themoviedb.org/3/search/movie?api_key=e00a8fe96730262954d4fe74242d0bb1&language=en-US&page=1&include_adult=false&query=${query}`)\n  .then(response => response.data)\n  return fetchMoviesQueris}\n\n"],"names":["ListMoviesStyled","styled","ItemMoviesStyled","NavLink","props","theme","colors","buttonBg","ImageFilmStyled","MovieTextStyled","grey","MoviesList","items","location","useLocation","map","id","title","original_title","name","backdrop_path","release_date","state","from","to","src","alt","noFilm","Date","toLocaleDateString","TitleStyled","Link","HomePage","useState","setItems","loading","setLoading","useEffect","MoviesAPI","then","data","results","fetchTrendMovies","useFetchTrendMovies","Loader","fetchMoviesAPI","axios","response","fetchMoviesById","fetchMoviesCredits","fetchMoviesReviews","fetchMoviesQuery","query"],"sourceRoot":""}